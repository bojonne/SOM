package jp.ac.yamanalab.som.rgbtest;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import jp.ac.yamanalab.som.basic.Coordinate;
import jp.ac.yamanalab.som.basic.DataVector;
import jp.ac.yamanalab.som.basic.EuclideanMeasure;
import jp.ac.yamanalab.som.basic.LearningFunction;
import jp.ac.yamanalab.som.basic.SimpleLearingFunction;
import jp.ac.yamanalab.som.basic.hex.HexagonalLatticeMap;

public class CybozuAnalysis {
	private static int HISTOGRAM_DIMENSION = 8;
	
	public static class CybozuUser implements DataVector {
		private final static int DIMENSION = HISTOGRAM_DIMENSION;
		private final String name;
		private final double[] histogram;
		public CybozuUser(String name) {
			this.name = name;
			histogram = new double[DIMENSION];
		}
		
		public static CybozuUser getRandom() {
			CybozuUser user = new CybozuUser("dummy");
			Random rand = new Random();
			for (int i=0;i<CybozuUser.DIMENSION;++i) {
				user.set(i, 10.0 * rand.nextDouble());
			}
			return user;
		}
		
		@Override
		public void randomize() {
			Random rand = new Random();
			for (int i=0;i<CybozuUser.DIMENSION;++i) {
				set(i, 10.0 * rand.nextDouble());
			}
		}
		
		@Override
		public double get(int index) {
			return histogram[index];
		}
		
		public String getName() {
			return name;
		}

		@Override
		public Color getColor() {
			return Color.white;
		}

		@Override
		public int getDimension() {
			return DIMENSION;
		}

		@Override
		public void set(int index, double value) {
			histogram[index] = value;
		}
	}
	
	private void runTest() throws InterruptedException, FileNotFoundException, IOException {
		final int MAP_W = 16;
		final int MAP_H = 16;
		final int PIXEL_SIZE = 600 / MAP_W;
		
		boolean wait = false;
		
		EuclideanMeasure<CybozuUser> measure = new EuclideanMeasure<CybozuUser>();
		LearningFunction lfunc = new SimpleLearingFunction(Math.max(MAP_W/3, MAP_H/3));
		
		CybozuUser[][] map = new CybozuUser[MAP_H][MAP_W + MAP_H / 2];
		for (int h=0;h<MAP_H;++h) {
			int offset = (MAP_H - h -1) / 2;
			for (int w=offset;w<MAP_W+offset;++w) {
				map[h][w] = CybozuUser.getRandom();
			}
		}
		
		HexagonalLatticeMap<CybozuUser> latticeMap
			= new HexagonalLatticeMap<CybozuUser>(map, MAP_W, MAP_H, measure, lfunc);
		CybozuHexagonalLatticeMapFrame frame = new CybozuHexagonalLatticeMapFrame(latticeMap, PIXEL_SIZE);
		
		frame.update();
		
		CybozuUser[] inputs = loadData("cybouz_hist_per_3.txt");
		
		System.out.println("Start learning");
		
		int step;
		for (step=0;step<100000;++step) {
			
			// mapping Users
			Map<String, Coordinate> usermap = new HashMap<String, Coordinate>();
			for (CybozuUser user : inputs) {
				Coordinate bmu = latticeMap.getBMU(user);
				usermap.put(user.getName(), bmu);
			}
			frame.setUsers(usermap);
			
			
			Thread.sleep(200);
			if (wait) {
				try {
					System.in.read();
					System.in.skip(100);
					System.out.println("read");
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
			CybozuUser v = inputs[step%inputs.length];
			if (latticeMap.learn(step, v, 1.0d)) break;
			frame.update();
		}
		
		System.out.println("End learning");
		System.out.println("Learning step: " + step);
	}
	
	private CybozuUser[] loadData(String filename) throws FileNotFoundException, IOException {
		FileInputStream fis = new FileInputStream(filename);
		InputStreamReader isr = new InputStreamReader(fis, Charset.forName("MS932"));
		BufferedReader reader = new BufferedReader(isr);
		String line;
		ArrayList<CybozuUser> users = new ArrayList<CybozuUser>();
		while (null != (line=reader.readLine())) {
			String[] items = line.split(" ");
			if (items.length != HISTOGRAM_DIMENSION + 1) {
				throw new IllegalStateException();
			}
			CybozuUser user = new CybozuUser(items[0]);
			for (int i=0;i<HISTOGRAM_DIMENSION;++i) {
				user.set(i, Double.valueOf(items[i+1]));
			}
			users.add(user);
		}
		CybozuUser[] ret = new CybozuUser[users.size()];
		users.toArray(ret);
		return ret;
	}
	
	public static void main(String[] args) throws FileNotFoundException, InterruptedException, IOException {
		new CybozuAnalysis().runTest();
	}
}
